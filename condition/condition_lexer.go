// Code generated from java-escape by ANTLR 4.11.1. DO NOT EDIT.

package condition

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type ConditionLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var conditionlexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func conditionlexerLexerInit() {
	staticData := &conditionlexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "'('", "')'", "'{'", "'}'", "'['", "','", "']'", "'=~'", "'!~'",
		"'=='", "'!='", "'>'", "'<'",
	}
	staticData.symbolicNames = []string{
		"", "", "", "", "", "", "", "", "LIKE", "NOTLIKE", "EQ", "NOTEQ", "GT",
		"LT", "IN", "NOTIN", "NOT", "AND", "OR", "COL", "ID", "COMMENT", "NL",
		"FLOAT", "DEC", "STRING", "WS",
	}
	staticData.ruleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "LIKE", "NOTLIKE",
		"EQ", "NOTEQ", "GT", "LT", "IN", "NOTIN", "NOT", "AND", "OR", "COL",
		"ID", "COMMENT", "NL", "FLOAT", "DEC", "STRING", "WS", "ESC", "DIGIT",
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N",
		"O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 26, 298, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3,
		1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8,
		1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13,
		1, 13, 1, 13, 1, 14, 1, 14, 3, 14, 145, 8, 14, 1, 14, 1, 14, 1, 15, 1,
		15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 18,
		1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 4, 19, 167, 8, 19, 11, 19, 12,
		19, 168, 1, 20, 1, 20, 1, 20, 1, 20, 5, 20, 175, 8, 20, 10, 20, 12, 20,
		178, 9, 20, 1, 20, 1, 20, 1, 21, 3, 21, 183, 8, 21, 1, 21, 1, 21, 1, 22,
		4, 22, 188, 8, 22, 11, 22, 12, 22, 189, 1, 22, 1, 22, 5, 22, 194, 8, 22,
		10, 22, 12, 22, 197, 9, 22, 1, 22, 1, 22, 4, 22, 201, 8, 22, 11, 22, 12,
		22, 202, 3, 22, 205, 8, 22, 1, 23, 4, 23, 208, 8, 23, 11, 23, 12, 23, 209,
		1, 24, 1, 24, 1, 24, 5, 24, 215, 8, 24, 10, 24, 12, 24, 218, 9, 24, 1,
		24, 1, 24, 1, 24, 1, 24, 5, 24, 224, 8, 24, 10, 24, 12, 24, 227, 9, 24,
		1, 24, 3, 24, 230, 8, 24, 1, 25, 4, 25, 233, 8, 25, 11, 25, 12, 25, 234,
		1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 243, 8, 26, 1, 27, 1,
		27, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 32, 1, 32,
		1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 37, 1, 37, 1,
		38, 1, 38, 1, 39, 1, 39, 1, 40, 1, 40, 1, 41, 1, 41, 1, 42, 1, 42, 1, 43,
		1, 43, 1, 44, 1, 44, 1, 45, 1, 45, 1, 46, 1, 46, 1, 47, 1, 47, 1, 48, 1,
		48, 1, 49, 1, 49, 1, 50, 1, 50, 1, 51, 1, 51, 1, 52, 1, 52, 1, 53, 1, 53,
		2, 216, 225, 0, 54, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8,
		17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17,
		35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26,
		53, 0, 55, 0, 57, 0, 59, 0, 61, 0, 63, 0, 65, 0, 67, 0, 69, 0, 71, 0, 73,
		0, 75, 0, 77, 0, 79, 0, 81, 0, 83, 0, 85, 0, 87, 0, 89, 0, 91, 0, 93, 0,
		95, 0, 97, 0, 99, 0, 101, 0, 103, 0, 105, 0, 107, 0, 1, 0, 30, 2, 0, 65,
		90, 97, 122, 2, 0, 10, 10, 13, 13, 3, 0, 9, 10, 13, 13, 32, 32, 1, 0, 48,
		57, 2, 0, 65, 65, 97, 97, 2, 0, 66, 66, 98, 98, 2, 0, 67, 67, 99, 99, 2,
		0, 68, 68, 100, 100, 2, 0, 69, 69, 101, 101, 2, 0, 70, 70, 102, 102, 2,
		0, 71, 71, 103, 103, 2, 0, 72, 72, 104, 104, 2, 0, 73, 73, 105, 105, 2,
		0, 74, 74, 106, 106, 2, 0, 75, 75, 107, 107, 2, 0, 76, 76, 108, 108, 2,
		0, 77, 77, 109, 109, 2, 0, 78, 78, 110, 110, 2, 0, 79, 79, 111, 111, 2,
		0, 80, 80, 112, 112, 2, 0, 81, 81, 113, 113, 2, 0, 82, 82, 114, 114, 2,
		0, 83, 83, 115, 115, 2, 0, 84, 84, 116, 116, 2, 0, 85, 85, 117, 117, 2,
		0, 86, 86, 118, 118, 2, 0, 87, 87, 119, 119, 2, 0, 88, 88, 120, 120, 2,
		0, 89, 89, 121, 121, 2, 0, 90, 90, 122, 122, 285, 0, 1, 1, 0, 0, 0, 0,
		3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0,
		11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0,
		0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0,
		0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0,
		0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1,
		0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49,
		1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 1, 109, 1, 0, 0, 0, 3, 111, 1, 0, 0, 0,
		5, 113, 1, 0, 0, 0, 7, 115, 1, 0, 0, 0, 9, 117, 1, 0, 0, 0, 11, 119, 1,
		0, 0, 0, 13, 121, 1, 0, 0, 0, 15, 123, 1, 0, 0, 0, 17, 126, 1, 0, 0, 0,
		19, 129, 1, 0, 0, 0, 21, 132, 1, 0, 0, 0, 23, 135, 1, 0, 0, 0, 25, 137,
		1, 0, 0, 0, 27, 139, 1, 0, 0, 0, 29, 142, 1, 0, 0, 0, 31, 148, 1, 0, 0,
		0, 33, 152, 1, 0, 0, 0, 35, 156, 1, 0, 0, 0, 37, 159, 1, 0, 0, 0, 39, 166,
		1, 0, 0, 0, 41, 170, 1, 0, 0, 0, 43, 182, 1, 0, 0, 0, 45, 204, 1, 0, 0,
		0, 47, 207, 1, 0, 0, 0, 49, 229, 1, 0, 0, 0, 51, 232, 1, 0, 0, 0, 53, 242,
		1, 0, 0, 0, 55, 244, 1, 0, 0, 0, 57, 246, 1, 0, 0, 0, 59, 248, 1, 0, 0,
		0, 61, 250, 1, 0, 0, 0, 63, 252, 1, 0, 0, 0, 65, 254, 1, 0, 0, 0, 67, 256,
		1, 0, 0, 0, 69, 258, 1, 0, 0, 0, 71, 260, 1, 0, 0, 0, 73, 262, 1, 0, 0,
		0, 75, 264, 1, 0, 0, 0, 77, 266, 1, 0, 0, 0, 79, 268, 1, 0, 0, 0, 81, 270,
		1, 0, 0, 0, 83, 272, 1, 0, 0, 0, 85, 274, 1, 0, 0, 0, 87, 276, 1, 0, 0,
		0, 89, 278, 1, 0, 0, 0, 91, 280, 1, 0, 0, 0, 93, 282, 1, 0, 0, 0, 95, 284,
		1, 0, 0, 0, 97, 286, 1, 0, 0, 0, 99, 288, 1, 0, 0, 0, 101, 290, 1, 0, 0,
		0, 103, 292, 1, 0, 0, 0, 105, 294, 1, 0, 0, 0, 107, 296, 1, 0, 0, 0, 109,
		110, 5, 40, 0, 0, 110, 2, 1, 0, 0, 0, 111, 112, 5, 41, 0, 0, 112, 4, 1,
		0, 0, 0, 113, 114, 5, 123, 0, 0, 114, 6, 1, 0, 0, 0, 115, 116, 5, 125,
		0, 0, 116, 8, 1, 0, 0, 0, 117, 118, 5, 91, 0, 0, 118, 10, 1, 0, 0, 0, 119,
		120, 5, 44, 0, 0, 120, 12, 1, 0, 0, 0, 121, 122, 5, 93, 0, 0, 122, 14,
		1, 0, 0, 0, 123, 124, 5, 61, 0, 0, 124, 125, 5, 126, 0, 0, 125, 16, 1,
		0, 0, 0, 126, 127, 5, 33, 0, 0, 127, 128, 5, 126, 0, 0, 128, 18, 1, 0,
		0, 0, 129, 130, 5, 61, 0, 0, 130, 131, 5, 61, 0, 0, 131, 20, 1, 0, 0, 0,
		132, 133, 5, 33, 0, 0, 133, 134, 5, 61, 0, 0, 134, 22, 1, 0, 0, 0, 135,
		136, 5, 62, 0, 0, 136, 24, 1, 0, 0, 0, 137, 138, 5, 60, 0, 0, 138, 26,
		1, 0, 0, 0, 139, 140, 3, 73, 36, 0, 140, 141, 3, 83, 41, 0, 141, 28, 1,
		0, 0, 0, 142, 144, 3, 31, 15, 0, 143, 145, 5, 32, 0, 0, 144, 143, 1, 0,
		0, 0, 144, 145, 1, 0, 0, 0, 145, 146, 1, 0, 0, 0, 146, 147, 3, 27, 13,
		0, 147, 30, 1, 0, 0, 0, 148, 149, 3, 83, 41, 0, 149, 150, 3, 85, 42, 0,
		150, 151, 3, 95, 47, 0, 151, 32, 1, 0, 0, 0, 152, 153, 3, 57, 28, 0, 153,
		154, 3, 83, 41, 0, 154, 155, 3, 63, 31, 0, 155, 34, 1, 0, 0, 0, 156, 157,
		3, 85, 42, 0, 157, 158, 3, 91, 45, 0, 158, 36, 1, 0, 0, 0, 159, 160, 5,
		99, 0, 0, 160, 161, 5, 111, 0, 0, 161, 162, 5, 108, 0, 0, 162, 163, 1,
		0, 0, 0, 163, 164, 3, 47, 23, 0, 164, 38, 1, 0, 0, 0, 165, 167, 7, 0, 0,
		0, 166, 165, 1, 0, 0, 0, 167, 168, 1, 0, 0, 0, 168, 166, 1, 0, 0, 0, 168,
		169, 1, 0, 0, 0, 169, 40, 1, 0, 0, 0, 170, 171, 5, 47, 0, 0, 171, 172,
		5, 47, 0, 0, 172, 176, 1, 0, 0, 0, 173, 175, 8, 1, 0, 0, 174, 173, 1, 0,
		0, 0, 175, 178, 1, 0, 0, 0, 176, 174, 1, 0, 0, 0, 176, 177, 1, 0, 0, 0,
		177, 179, 1, 0, 0, 0, 178, 176, 1, 0, 0, 0, 179, 180, 6, 20, 0, 0, 180,
		42, 1, 0, 0, 0, 181, 183, 5, 13, 0, 0, 182, 181, 1, 0, 0, 0, 182, 183,
		1, 0, 0, 0, 183, 184, 1, 0, 0, 0, 184, 185, 5, 10, 0, 0, 185, 44, 1, 0,
		0, 0, 186, 188, 3, 55, 27, 0, 187, 186, 1, 0, 0, 0, 188, 189, 1, 0, 0,
		0, 189, 187, 1, 0, 0, 0, 189, 190, 1, 0, 0, 0, 190, 191, 1, 0, 0, 0, 191,
		195, 5, 46, 0, 0, 192, 194, 3, 55, 27, 0, 193, 192, 1, 0, 0, 0, 194, 197,
		1, 0, 0, 0, 195, 193, 1, 0, 0, 0, 195, 196, 1, 0, 0, 0, 196, 205, 1, 0,
		0, 0, 197, 195, 1, 0, 0, 0, 198, 200, 5, 46, 0, 0, 199, 201, 3, 55, 27,
		0, 200, 199, 1, 0, 0, 0, 201, 202, 1, 0, 0, 0, 202, 200, 1, 0, 0, 0, 202,
		203, 1, 0, 0, 0, 203, 205, 1, 0, 0, 0, 204, 187, 1, 0, 0, 0, 204, 198,
		1, 0, 0, 0, 205, 46, 1, 0, 0, 0, 206, 208, 3, 55, 27, 0, 207, 206, 1, 0,
		0, 0, 208, 209, 1, 0, 0, 0, 209, 207, 1, 0, 0, 0, 209, 210, 1, 0, 0, 0,
		210, 48, 1, 0, 0, 0, 211, 216, 5, 34, 0, 0, 212, 215, 3, 53, 26, 0, 213,
		215, 9, 0, 0, 0, 214, 212, 1, 0, 0, 0, 214, 213, 1, 0, 0, 0, 215, 218,
		1, 0, 0, 0, 216, 217, 1, 0, 0, 0, 216, 214, 1, 0, 0, 0, 217, 219, 1, 0,
		0, 0, 218, 216, 1, 0, 0, 0, 219, 230, 5, 34, 0, 0, 220, 225, 5, 39, 0,
		0, 221, 224, 3, 53, 26, 0, 222, 224, 9, 0, 0, 0, 223, 221, 1, 0, 0, 0,
		223, 222, 1, 0, 0, 0, 224, 227, 1, 0, 0, 0, 225, 226, 1, 0, 0, 0, 225,
		223, 1, 0, 0, 0, 226, 228, 1, 0, 0, 0, 227, 225, 1, 0, 0, 0, 228, 230,
		5, 39, 0, 0, 229, 211, 1, 0, 0, 0, 229, 220, 1, 0, 0, 0, 230, 50, 1, 0,
		0, 0, 231, 233, 7, 2, 0, 0, 232, 231, 1, 0, 0, 0, 233, 234, 1, 0, 0, 0,
		234, 232, 1, 0, 0, 0, 234, 235, 1, 0, 0, 0, 235, 236, 1, 0, 0, 0, 236,
		237, 6, 25, 0, 0, 237, 52, 1, 0, 0, 0, 238, 239, 5, 92, 0, 0, 239, 243,
		5, 34, 0, 0, 240, 241, 5, 92, 0, 0, 241, 243, 5, 92, 0, 0, 242, 238, 1,
		0, 0, 0, 242, 240, 1, 0, 0, 0, 243, 54, 1, 0, 0, 0, 244, 245, 7, 3, 0,
		0, 245, 56, 1, 0, 0, 0, 246, 247, 7, 4, 0, 0, 247, 58, 1, 0, 0, 0, 248,
		249, 7, 5, 0, 0, 249, 60, 1, 0, 0, 0, 250, 251, 7, 6, 0, 0, 251, 62, 1,
		0, 0, 0, 252, 253, 7, 7, 0, 0, 253, 64, 1, 0, 0, 0, 254, 255, 7, 8, 0,
		0, 255, 66, 1, 0, 0, 0, 256, 257, 7, 9, 0, 0, 257, 68, 1, 0, 0, 0, 258,
		259, 7, 10, 0, 0, 259, 70, 1, 0, 0, 0, 260, 261, 7, 11, 0, 0, 261, 72,
		1, 0, 0, 0, 262, 263, 7, 12, 0, 0, 263, 74, 1, 0, 0, 0, 264, 265, 7, 13,
		0, 0, 265, 76, 1, 0, 0, 0, 266, 267, 7, 14, 0, 0, 267, 78, 1, 0, 0, 0,
		268, 269, 7, 15, 0, 0, 269, 80, 1, 0, 0, 0, 270, 271, 7, 16, 0, 0, 271,
		82, 1, 0, 0, 0, 272, 273, 7, 17, 0, 0, 273, 84, 1, 0, 0, 0, 274, 275, 7,
		18, 0, 0, 275, 86, 1, 0, 0, 0, 276, 277, 7, 19, 0, 0, 277, 88, 1, 0, 0,
		0, 278, 279, 7, 20, 0, 0, 279, 90, 1, 0, 0, 0, 280, 281, 7, 21, 0, 0, 281,
		92, 1, 0, 0, 0, 282, 283, 7, 22, 0, 0, 283, 94, 1, 0, 0, 0, 284, 285, 7,
		23, 0, 0, 285, 96, 1, 0, 0, 0, 286, 287, 7, 24, 0, 0, 287, 98, 1, 0, 0,
		0, 288, 289, 7, 25, 0, 0, 289, 100, 1, 0, 0, 0, 290, 291, 7, 26, 0, 0,
		291, 102, 1, 0, 0, 0, 292, 293, 7, 27, 0, 0, 293, 104, 1, 0, 0, 0, 294,
		295, 7, 28, 0, 0, 295, 106, 1, 0, 0, 0, 296, 297, 7, 29, 0, 0, 297, 108,
		1, 0, 0, 0, 17, 0, 144, 168, 176, 182, 189, 195, 202, 204, 209, 214, 216,
		223, 225, 229, 234, 242, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ConditionLexerInit initializes any static state used to implement ConditionLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewConditionLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func ConditionLexerInit() {
	staticData := &conditionlexerLexerStaticData
	staticData.once.Do(conditionlexerLexerInit)
}

// NewConditionLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewConditionLexer(input antlr.CharStream) *ConditionLexer {
	ConditionLexerInit()
	l := new(ConditionLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &conditionlexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "Condition.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// ConditionLexer tokens.
const (
	ConditionLexerT__0    = 1
	ConditionLexerT__1    = 2
	ConditionLexerT__2    = 3
	ConditionLexerT__3    = 4
	ConditionLexerT__4    = 5
	ConditionLexerT__5    = 6
	ConditionLexerT__6    = 7
	ConditionLexerLIKE    = 8
	ConditionLexerNOTLIKE = 9
	ConditionLexerEQ      = 10
	ConditionLexerNOTEQ   = 11
	ConditionLexerGT      = 12
	ConditionLexerLT      = 13
	ConditionLexerIN      = 14
	ConditionLexerNOTIN   = 15
	ConditionLexerNOT     = 16
	ConditionLexerAND     = 17
	ConditionLexerOR      = 18
	ConditionLexerCOL     = 19
	ConditionLexerID      = 20
	ConditionLexerCOMMENT = 21
	ConditionLexerNL      = 22
	ConditionLexerFLOAT   = 23
	ConditionLexerDEC     = 24
	ConditionLexerSTRING  = 25
	ConditionLexerWS      = 26
)
